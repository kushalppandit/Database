>db.employee.find({"name":"kishori",age:30}).limit(3); ------display 3 documents

------find movie with name aradhana and rating=5

>db.movie.find({name:"aradhana",rating:5})

------find movie with name aradhana or rating=5

>db.movie.find({$or:[{name:"aradhana"},{rating:5}]})

----find all movies whose rating is 5 or price is 200
>db.movie.find({$or:[{rating:5},{price:200}]})



-----find all documents whose age >=18 and <=30
>db.employee.find({"age":{$gte:18,$lte:30}}) 

>db.employee.find({age:{$gte:18,$lt:30}})
 
>db.employee.find({age:{$gt:30,$lt:60}}) 



>db.employee.find({$or:[{age:{$gt:30}},{$and:[{age:{$lt:15}},{}]]})

db.emp.find({age:30},{name:1,sal:1})

---to display only name and deptno but not _id on the screen but only first 10 documents
>db.employee.find({},{ename:1,deptno:1,_id:0}).limit(10).skip(5).sort({ename:1,age:-1});



---list all the movies whose price is either 100 or 150 or 200
>db.movie.find({price:{$in:[100,150,200]}})


----display all employees whose id is either 100 or 200 or 300
db.employee.find({"empid":{$in:[100,200,300]}})
----- display all movie with rating 4 or price is either 100 or 200 or 300 

>db.movie.find({$or:[{rating:{$gt:4}},{price:{$in:[100,200,150]}}]})

----- to display all employees whose name is null
>db.employee.find({ename:{$in:[null],$exists:true}})
{eno:1,ename:null,dept:{dno:123,dname:"HR"}}

---list all documents whose age is either 40 or 20 or 30   or sal is >2000

"sal":{$gt:2000}

>db.movie.find({$or:[{"rating":{$in:[3,4]}},{price:{$in:[100,150]}]}]})

age condition    "age":{$in:[40,20,30]}
sal  consition   "sal":{$gt:2000}

>db.employee.find({$or:[{"age":{$in:[40,20,30]}},{"sal":{$gt:2000}}]})

or     {$or:[{"age":{$in:[40,20,30]}},{"sal":{$gt:2000}}]}
>db.employee.find({$or:[{"age":{$in:[40,20,30]}},{"sal":{$gt:2000}}]});

-----we have one movie collection
name,ticket_no,rating,winner
1. to find document with ticket no is 125 or winner is true
>db.movie.find({$or:[{ticket_no:125},{winner:true}]})
>db.movie.find({$or:[{ticket_no:125},{rating:5}]})
>db.movie.find({$or:[{ticket_no:{$in:[234,200,245]}},{rating:5}])
{$or:[{ticket_no:234},{ticket_no:200},{ticket_no:245}]}

2. to find document which ticket no is either 234or 200 or 450
and winner is true
>db.movie.find({$and:[{ticket_no:{$nin:[234,200,450]}},{winner:true}}]})


3. display only name of movie for all movies for which no rating is given
>db.movie.find({"rating":{$in:[null],$exist:true}},{name:1,_id:0})



4. list all movies whose name starts with p
>db.movie.find({"name":/^p/})
>db.mivie.find({"name":/p$/})

----list all the movies whose name contains "a" at second position
>db.movie.find({name:/.a,+/})






5. to find all movies whose name starts with p and 
ends with s and max length of name can be 7











>db.movie.find({"name":/^p.\{5,8\}s$/})
--list all movies whose name contains abc in it
>db.movie.find({"name":/abc/});

------display all movies from 4 th position onward
>db.movie.find().skip(3).limit(10)

>db.movie.find().limit(50)
>db.movie.find().limit(50).skip(150).explain()   ----explain function will display qery plan
----arrange data on price in ascending order
>db.movie.find().sort({price:1,name:-1})
-----list first 5 topmost rated movies
>db.movie.find().sort({rating:-1}).limit(5).sort({name:1})

------to list all movies 
> db.movie.aggregate([{$match:{$or:[{"price":{$lt:200}},{"price":{$gt:400}}]}}]).pretty();

{ordno:1,custname:"Kishori",products:[{prodid:1,name:"xyz",price:20 0},
                   {prodid:3,name:"abc",price:300},
                    {prodid:4,name:"aaa",price:500}]}
{ordno:2,custname:"Rajan",products:[{prodid:11,name:"xyz",price:20 0},
                   {prodid:31,name:"lll",price:200},
                    {prodid:41,name:"bbb",price:400}]}

>db.order.find({},{ordno:1,"custname":1,_id:0,"products.prodid":1})
----list all orders containing product xyz
>db.order.find({"products.name":"xyz"})

----list all orders containing product bbb
>db.order.find({"products.name":"bbb"})

>db.order.find({"products.0.name":"xyz"})

>>db.order.find({$elematch:[{"products.name":"bbb"},{"products.pice":200}]}})





>db.food.insert({"fruits":["apple","banana","guava","orange","mango"]})
-list all food documents in which fruits array contains both banana and orange
>db.food.find({"friuts":{$all:["banana","orange]}})
----list all food items containing fruits array with size 3
>db.food.find({"fruits":{$size:3}})




---to remove all documents
>db.movie.remove()
------- to remove kahani movie
>db.movie.remove({"name":"kahani"});

----- increase number of tickets by 10
>db.movie.update({name:"kahani},{$inc:{"ticket_no":10}})
---to modify price of movie
db.movie.update({name:"kahani},{$set:{"price":10}})   

------delete rating of movie sholay
db.movie.update({name:"kahani},{$unset:{"rating"}})  
-----to add an actor in actor array
>db.movie.update({name:"3 idiots"},{$push:{"actor":"boman Irani"}}) 
>>db.movie.update({name:"3 idiots"},{$push:{"actor":{$each:["boman Irani","mona"]}}}) 
>db.movie.update({name:"3 idiots"},{$push:{"actor":{$each:["boman Irani","mona"],
                                                    $slice:-10}}}) 




bolgs.post is a collection contains following structure
{"contents":"These are blog contents",
"owner":"He/she is written the blog",
comments:[{name:"aaa","text":"This is comment 1 text","rating:5,"vote":5},
          {name:"bbb","text":"This is comment 2 text","rating:3,"vote":6},
          {name:"aaa","text":"This is comment text","rating:5,"vote":5}]}
----to add nooflikes key value pair
>db.blogs.post.update({"owner":"aaa"},{$set:{"nooflikes":7}},{multi:true},
       {upsert:true})

------delete all posts whose rating is 5
>db.blogs.post.update({},{"comments":{"$pull":{"rating":5}}})
---increase votes of comments at 0 th position  whose owner is "aaaa"
>db.blogs.post.update({"owner":"aaa"},{$inc:{"comments.0.votes":2}})
-------increase votes of comments in which comments is given by person whose name is "aaaaa"
>db.blogs.post.update({"comments.name":"aaaa"},{$inc:{"comments.$.votes":2}})





























----to rempve the actor
>db.movie.update({name:"3 idiots"},{$pop:{"actor":-1}})   

Indexes

-  to search records faster
- If required indexes are not there then in find() query it will read entire table
which is called as table scan
but table scan is time consuming
-hence it is good to create required indexes
-drawback
----- it requires additional space
------ and dml operations(insert,update, delete) will be time consuming
because for every operation all required indexes will be updated
------to create index functions are ensureIndex() or createIndex()
------to delete index function is dropIndex()
------to find all indexes on collections function is getIndex()
>db.employee.getIndexes();
------to find how much total space index is occupying use totalIndexSize()
>db.employee.totalIndexSize()
------example display all employee document whose name is "Kishori"
------if index on name exists
>db.employee.find({name:"Kishori"});   ----- it will use index
------to find number of scans
>db.employee.find({name:"Kishori"}).explain(); ---will display execution plan
------example to display all employees whose salary is > 3000
------if no index on salary exist
>db.employee.find({"salary":{$gt:3000}})
-----since index is not there it will do entier table scan
------
>db.runCommand({getLastError:1})
-------to drop collection
>db.employee.drop();
>db.runCommand('drop','employee')

-------lets create an index on name for employee
>db.employee.ensureIndex({name:1});
----if you want to specify which index to use. by default system will decide
>db.employee.find({"name":"Kishori}).hint({});

-----imagine article
{autor:"aaa",article_name:"asdfg11"}
{autor:"pqr",article_name:"asdfg1"}
{autor:"aaa",article_name:"asdfg2"}
{autor:"pqr",article_name:"asdfg3"}
{autor:"aaa",article_name:"asdfg4"}
{autor:"xyz",article_name:"asdfg123"}

>db.article.aggregate([{$project:{"author":1}},{$group:{"_id":"$author","count":{$sum:1}}}]);

aaa-3
pqr-2
xyz-1

>
>>db.article.aggregate([{$project:{"author":1}},{$group:{"_id":"$author","count":{$sum:1}}},
{$sort:{count:1}}]);



db.article.aggregate([{$project:{"author":1}},
                      {$group:{"_id":"$author","count":{$sum:1}}},
		      {$sort:{count:1}},
                      {$limit:2}]);

------- list of filter commands 

$project
$group
$sort
$limit
$skip
$match

------
$match:{city:"pune"}
$gt,$lt,$and,$or
------list all ename and sal+comm
db.employee.aggregate([{$project:{ename:1,empno:1,"total_pay":{$add:["$sal","$comm"]}}])

$add:[expr1,expr2,....]
$subtract : [erpr1,expr2]
$multiply: [expr1,expr2,....]
$mod : [erpr1,expr2]
$divide:[expr1,expr2]

Date function

$dayOfMonth
$dayOfWeek
$dayOfYear
$hour
$minute
$second
$year

------- to list experience in years

>db.employee.aggregate([{$project:{empno:1,"experience":
                            {$subtract:[{"$year":new Date()},
                                        {"$year":hireDate}]}}}]);
-------------
String function
$substr:[expr,startoffset,length]
$concat:[expr1,expr2,expr3.....]
$toUpper:[expr1]
$toLower:[expr1]


$concat:["$firstname",".","$lastname","@gmail.com"]
>db.employee.aggregate([{$project:{empno:1,
                      email:$concat:["$firstname",".","$lastname","@gmail.com"]}}])


----control statement
$cond:[booleanexpr,expr1,expr2]
$ifNull:[expr,replacement string]


---------$group
count:{$sum:1}
$sum
$max
$min
$avg
$first
$last

>db.employee.aggregate([{$group:{"_id":"$deptno","minsal":{$min:"$sal"},
                        "maxmsal":{$max:"$sal"}}}])
>db.blog.post.aggregrate({$unwind:comments})

























































































































































----- displays first 10 comments
>db.blogs.post.find({},{comments:1}).limit(10)
db.blogs.post.find({},{"comments":{$slice:10}})
-----to display last 10 comments
db.blogs.post.find({},{"comments":{$slice:-10}})
----- to display comments 24 to 39
db.blogs.post.find({},{"comments":{$slice:[23,15]}}) 

 



















































